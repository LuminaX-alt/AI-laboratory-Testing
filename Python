!pip install pandas fpdf gradio
import pandas as pd

# Lab Test Database - Define a list of tests with reference ranges and conditions
lab_tests = {
    'Test Name': ['Hemoglobin (Hb)', 'Cholesterol (Total)', 'Blood Glucose', 'Creatinine', 'White Blood Cell Count'],
    'Reference Range': ['13.8 - 17.2 g/dL (Male)', '125 - 200 mg/dL', '70 - 100 mg/dL (Fasting)', '0.6 - 1.2 mg/dL', '4,500 - 11,000 cells/μL'],
    'Abnormality': ['< 13.8 g/dL or > 17.2 g/dL', '< 125 mg/dL or > 200 mg/dL', '< 70 mg/dL or > 100 mg/dL', '< 0.6 mg/dL or > 1.2 mg/dL', '< 4,500 or > 11,000 cells/μL'],
    'Related Conditions': ['Anemia, Polycythemia', 'Hyperlipidemia, Heart Disease', 'Hypoglycemia, Diabetes', 'Kidney Disease', 'Infection, Leukemia']
}

# Create the DataFrame
df_lab_tests = pd.DataFrame(lab_tests)
df_lab_tests
# Function to interpret a lab test result
def interpret_test_result(test_name, result):
    # Lookup test in the lab tests database
    test_info = df_lab_tests[df_lab_tests['Test Name'] == test_name].iloc[0]
    
    # Extract the reference range and abnormality condition
    reference_range = test_info['Reference Range']
    abnormality = test_info['Abnormality']
    
    # Interpret the result
    if eval(f'{result} {abnormality.split(" ")[1]} {abnormality.split(" ")[2]}'):
        interpretation = "Abnormal: " + test_info['Related Conditions']
    else:
        interpretation = "Normal"
        
    return reference_range, interpretation
import gradio as gr

# Function to handle user input and generate a real-time report
def handle_lab_result(test_name, result):
    reference_range, interpretation = interpret_test_result(test_name, result)
    
    # Generate report content
    report_content = f"Lab Test: {test_name}\n"
    report_content += f"Test Result: {result}\n"
    report_content += f"Reference Range: {reference_range}\n"
    report_content += f"Interpretation: {interpretation}\n"
    
    # Generate PDF report
    from fpdf import FPDF
    
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font('Arial', 'B', 12)
    
    pdf.cell(200, 10, txt="Lab Test Report", ln=True, align='C')
    pdf.ln(10)
    
    # Add report content to the PDF
    for line in report_content.split("\n"):
        pdf.cell(200, 10, txt=line, ln=True)
    
    # Save PDF in Colab environment
    pdf.output("/content/lab_test_report.pdf")
    
    return report_content, "/content/lab_test_report.pdf"

# List of available lab tests for the dropdown menu
test_options = df_lab_tests['Test Name'].tolist()

# Gradio Interface for input
interface = gr.Interface(
    fn=handle_lab_result, 
    inputs=[gr.Dropdown(test_options, label="Select Test"), gr.Number(label="Enter Result")], 
    outputs=[gr.Textbox(label="Interpretation"), gr.File(label="Download Report")]
)

# Launch the interface
interface.launch()
import pandas as pd

# Lab Test Database - Define a list of tests with reference ranges and conditions
lab_tests = {
    'Test Name': ['Hemoglobin (Hb)', 'Cholesterol (Total)', 'Blood Glucose', 'Creatinine', 'White Blood Cell Count'],
    'Reference Range': ['13.8 - 17.2 g/dL (Male)', '125 - 200 mg/dL', '70 - 100 mg/dL (Fasting)', '0.6 - 1.2 mg/dL', '4,500 - 11,000 cells/μL'],
    'Abnormality': ['< 13.8 g/dL or > 17.2 g/dL', '< 125 mg/dL or > 200 mg/dL', '< 70 mg/dL or > 100 mg/dL', '< 0.6 mg/dL or > 1.2 mg/dL', '< 4,500 or > 11,000 cells/μL'],
    'Related Conditions': ['Anemia, Polycythemia', 'Hyperlipidemia, Heart Disease', 'Hypoglycemia, Diabetes', 'Kidney Disease', 'Infection, Leukemia']
}

# Create the DataFrame
df_lab_tests = pd.DataFrame(lab_tests)
df_lab_tests
# Function to interpret a lab test result
def interpret_test_result(test_name, result):
    # Lookup test in the lab tests database
    test_info = df_lab_tests[df_lab_tests['Test Name'] == test_name].iloc[0]
    
    # Extract the reference range and abnormality condition
    reference_range = test_info['Reference Range']
    abnormality = test_info['Abnormality']
    
    # Parse the abnormality condition
    min_value, max_value = map(float, abnormality.split(" ")[1:3])
    
    # Interpret the result
    if result < min_value or result > max_value:
        interpretation = f"Abnormal: {test_info['Related Conditions']}"
    else:
        interpretation = "Normal"
        
    return reference_range, interpretation
import gradio as gr
from fpdf import FPDF

# Function to handle user input and generate a real-time report
def handle_lab_result(test_name, result):
    reference_range, interpretation = interpret_test_result(test_name, result)
    
    # Generate report content
    report_content = f"Lab Test: {test_name}\n"
    report_content += f"Test Result: {result}\n"
    report_content += f"Reference Range: {reference_range}\n"
    report_content += f"Interpretation: {interpretation}\n"
    
    # Generate PDF report
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font('Arial', 'B', 12)
    
    pdf.cell(200, 10, txt="Lab Test Report", ln=True, align='C')
    pdf.ln(10)
    
    # Add report content to the PDF
    for line in report_content.split("\n"):
        pdf.cell(200, 10, txt=line, ln=True)
    
    # Save PDF in Colab environment
    pdf.output("/content/lab_test_report.pdf")
    
    return report_content, "/content/lab_test_report.pdf"

# List of available lab tests for the dropdown menu
test_options = df_lab_tests['Test Name'].tolist()

# Gradio Interface for input
interface = gr.Interface(
    fn=handle_lab_result, 
    inputs=[gr.Dropdown(test_options, label="Select Test"), gr.Number(label="Enter Result")], 
    outputs=[gr.Textbox(label="Interpretation"), gr.File(label="Download Report")]
)

# Launch the interface
interface.launch()
import pandas as pd

# Lab Test Database - Define a list of tests with reference ranges and conditions
lab_tests = {
    'Test Name': ['Hemoglobin (Hb)', 'Cholesterol (Total)', 'Blood Glucose', 'Creatinine', 'White Blood Cell Count'],
    'Reference Range': ['13.8 - 17.2 g/dL (Male)', '125 - 200 mg/dL', '70 - 100 mg/dL (Fasting)', '0.6 - 1.2 mg/dL', '4,500 - 11,000 cells/μL'],
    'Abnormality': ['< 13.8 g/dL or > 17.2 g/dL', '< 125 mg/dL or > 200 mg/dL', '< 70 mg/dL or > 100 mg/dL', '< 0.6 mg/dL or > 1.2 mg/dL', '< 4,500 or > 11,000 cells/μL'],
    'Related Conditions': ['Anemia, Polycythemia', 'Hyperlipidemia, Heart Disease', 'Hypoglycemia, Diabetes', 'Kidney Disease', 'Infection, Leukemia']
}

# Create the DataFrame
df_lab_tests = pd.DataFrame(lab_tests)
df_lab_tests
# Function to interpret a lab test result
def interpret_test_result(test_name, result):
    # Ensure result is a numeric value
    try:
        result = float(result)
    except ValueError:
        return "Invalid input: Result must be a number."

    # Lookup test in the lab tests database
    test_info = df_lab_tests[df_lab_tests['Test Name'] == test_name].iloc[0]
    
    # Extract the reference range and abnormality condition
    reference_range = test_info['Reference Range']
    abnormality = test_info['Abnormality']
    
    # Extract min and max values from the abnormality string
    if '>' in abnormality:
        min_value = None
        max_value = float(abnormality.split(" > ")[1].replace(' mg/dL', '').replace(' g/dL', '').replace(' cells/μL', ''))
    elif '<' in abnormality:
        min_value = float(abnormality.split(" < ")[1].replace(' mg/dL', '').replace(' g/dL', '').replace(' cells/μL', ''))
        max_value = None
    else:
        min_value, max_value = map(float, abnormality.split(" - "))

    # Interpret the result
    interpretation = "Normal"
    
    if min_value and result < min_value:
        interpretation = f"Abnormal: {test_info['Related Conditions']}"
    elif max_value and result > max_value:
        interpretation = f"Abnormal: {test_info['Related Conditions']}"
        
    return reference_range, interpretation
import gradio as gr
from fpdf import FPDF

# Function to handle user input and generate a real-time report
def handle_lab_result(test_name, result):
    reference_range, interpretation = interpret_test_result(test_name, result)
    
    if isinstance(reference_range, str):
        return reference_range, None
    
    # Generate report content
    report_content = f"Lab Test: {test_name}\n"
    report_content += f"Test Result: {result}\n"
    report_content += f"Reference Range: {reference_range}\n"
    report_content += f"Interpretation: {interpretation}\n"
    
    # Generate PDF report
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font('Arial', 'B', 12)
    
    pdf.cell(200, 10, txt="Lab Test Report", ln=True, align='C')
    pdf.ln(10)
    
    # Add report content to the PDF
    for line in report_content.split("\n"):
        pdf.cell(200, 10, txt=line, ln=True)
    
    # Save PDF in Colab environment
    pdf.output("/content/lab_test_report.pdf")
    
    return report_content, "/content/lab_test_report.pdf"

# List of available lab tests for the dropdown menu
test_options = df_lab_tests['Test Name'].tolist()

# Gradio Interface for input
interface = gr.Interface(
    fn=handle_lab_result, 
    inputs=[gr.Dropdown(test_options, label="Select Test"), gr.Number(label="Enter Result")], 
    outputs=[gr.Textbox(label="Interpretation"), gr.File(label="Download Report")]
)

# Launch the interface
interface.launch()
